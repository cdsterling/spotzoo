{"ast":null,"code":"var _jsxFileName = \"/Users/chadsterling/Documents/Kickstart/Frontend/spotzoo/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport mapboxgl from 'mapbox-gl';\nimport NavBar from './components/NavBar/NavBar.js';\nimport SmallCard from './components/SmallCard/SmallCard.js';\nimport ReactMapGl, { Marker } from \"react-map-gl\";\nimport Red from \"./red_marker.png\";\nimport User from \"./user.png\"; // Component - Pages\n// import Welcome from './components/pages/Welcome/Welcome.js';\n// animal_data = [\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         spot_time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     }\n// ]\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_TOKEN;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      animal_details: null,\n      filter: \"\",\n      highlighted_animal: null,\n      animal_name: \"\",\n      animal_latitude: null,\n      animal_longitude: null,\n      animal_spot_time: null,\n      animal_animalType: null,\n      \"viewport\": {\n        width: '100vw',\n        height: '100vh',\n        latitude: 37.6162,\n        longitude: -122.0884,\n        zoom: 10\n      },\n      userLocation: {},\n      data: [],\n      distance: []\n    };\n\n    this.onViewportChange = viewport => {\n      this.setState({\n        viewport\n      });\n    };\n\n    this.setUserLocation = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        let setUserLocation = {\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        }; // distance to markers\n\n        let distanceOne = {};\n\n        for (let i of this.state.data) {\n          let k = new mapboxgl.LngLat(i.longitude, i.latitude);\n          let s = new mapboxgl.LngLat(setUserLocation.long, setUserLocation.lat);\n          let dist = k.distanceTo(s) * 0.000621;\n          let miles = Math.max(Math.ceil(dist * 10) / 10, 2.8);\n          let id = i[\"_id\"];\n          distanceOne[id] = miles;\n        }\n\n        this.setState({\n          distance: distanceOne,\n          userLocation: setUserLocation,\n          viewport: {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          }\n        });\n      });\n    };\n\n    this.onChangeContent = ev => {\n      this.setState({\n        name: ev.target.value\n      });\n    };\n\n    this.submit = () => {\n      var date = new Date();\n      const formData = {\n        animal: this.state.name,\n        latitude: this.state.userLocation.lat,\n        longitude: this.state.userLocation.long,\n        date: date,\n        comment: this.state.comment,\n        submitter: this.state.submitter\n      };\n      console.log(this.state.name);\n      fetch('/api/mongodb/markers/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      }).then(response => response.json()).then(data => {\n        console.log('Got this back', data);\n      });\n    };\n  }\n\n  // DELETE function,\n  deleteMarker(documentId) {\n    fetch('/api/mongodb/markers/?_id=' + documentId, {\n      method: 'DELETE'\n    }).then(response => response.json()).then(data => {\n      console.log('Got this back', data);\n      this.onFetch();\n    });\n  } // Api call grab data from mongodb\n  // this.setState({data}, () => console.log('data fetched...', data)\n  //       dataOne.push(data);\n\n\n  onFetch() {\n    console.log('runing');\n    let dataOne = [];\n    fetch('/api/mongodb/markers/').then(res => res.json()).then(data => {\n      console.log('receiving data', data);\n      dataOne.push(data); //   this.setState({data});\n\n      console.log(dataOne);\n      this.setUserLocation();\n    });\n  }\n\n  componentDidMount() {\n    this.onFetch();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"NavBarContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      homeLink: \"/\",\n      contributeLink: \"/contribute\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"SideBarContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(SmallCard, {\n      emoji: '🐇',\n      name: 'name',\n      timestamp: 'timestamp',\n      submitted_by: 'submitted by',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"MapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(ReactMapGl, Object.assign({}, this.state.viewport, {\n      mapboxApiAccessToken: process.env.REACT_APP_TOKEN,\n      mapStyle: \"mapbox://styles/marby87/ck6j39qkz0i7k1inu9gqqc4o1\",\n      onViewportChange: viewport => this.onViewportChange(viewport),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), Object.keys(this.state.userLocation).length !== 0 ? React.createElement(Marker, {\n      className: \"user\",\n      keys: \"1\",\n      latitude: this.state.userLocation.lat,\n      longitude: this.state.userLocation.long,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"location-icon\",\n      alt: \"location-icon\",\n      src: User,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Empty\"), Object.values(this.state.data).length !== 0 ? this.state.data.map((data, index) => React.createElement(Marker, {\n      className: \"markers\",\n      keys: data._id,\n      id: data._id,\n      latitude: data.latitude,\n      longitude: data.longitude,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"location-icon\",\n      alt: \"location-icon\",\n      src: Red,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), this.state.distance[data._id], \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), \" \", data.animal, \"  \")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Empty\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chadsterling/Documents/Kickstart/Frontend/spotzoo/client/src/App.js"],"names":["React","Component","mapboxgl","NavBar","SmallCard","ReactMapGl","Marker","Red","User","MAPBOX_TOKEN","process","env","REACT_APP_TOKEN","App","state","animal_details","filter","highlighted_animal","animal_name","animal_latitude","animal_longitude","animal_spot_time","animal_animalType","width","height","latitude","longitude","zoom","userLocation","data","distance","onViewportChange","viewport","setState","setUserLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","long","distanceOne","i","k","LngLat","s","dist","distanceTo","miles","Math","max","ceil","id","onChangeContent","ev","name","target","value","submit","date","Date","formData","animal","comment","submitter","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","deleteMarker","documentId","onFetch","dataOne","res","push","componentDidMount","render","Object","keys","length","values","map","index","_id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport mapboxgl from 'mapbox-gl'\n\nimport NavBar from './components/NavBar/NavBar.js';\nimport SmallCard from './components/SmallCard/SmallCard.js';\nimport ReactMapGl,{Marker} from \"react-map-gl\"\nimport Red from \"./red_marker.png\"\nimport User from \"./user.png\"\n\n// Component - Pages\n// import Welcome from './components/pages/Welcome/Welcome.js';\n\n// animal_data = [\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         spot_time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     }\n\n\n// ]\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_TOKEN;\n\nclass App extends Component {\n\n  state = {\n      animal_details: null,\n      filter: \"\",\n      highlighted_animal: null,\n      animal_name: \"\",\n      animal_latitude: null,\n      animal_longitude: null,\n      animal_spot_time: null,\n      animal_animalType: null,\n      \"viewport\": {\n        width: '100vw',\n        height: '100vh',\n        latitude: 37.6162,\n        longitude: -122.0884,\n        zoom: 10\n      },\n      userLocation : {},\n      data:[],\n      distance : []\n      \n    };\n  \n  onViewportChange = viewport => {\n    this.setState({viewport});\n  }\n  // User location function\n  setUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n       let setUserLocation = {\n           lat: position.coords.latitude,\n           long: position.coords.longitude\n        }; \n        // distance to markers\n        let distanceOne = {}\n        for (let i of this.state.data ){\n            let k = new mapboxgl.LngLat(i.longitude, i.latitude);\n            let s = new mapboxgl.LngLat(setUserLocation.long, setUserLocation.lat)\n            let dist = k.distanceTo(s)* 0.000621\n            let miles = (Math.max( Math.ceil(dist * 10) / 10, 2.8 ))\n            let id = i[\"_id\"];\n            distanceOne[id] = miles;     \n          } \n        this.setState({\n          distance : distanceOne,\n          userLocation: setUserLocation,\n          viewport: {\n            latitude :position.coords.latitude,\n            longitude : position.coords.longitude\n          }\n\n        });\n        \n    });\n  };    \n    \n  // DELETE function,\n  deleteMarker(documentId) {\n    fetch('/api/mongodb/markers/?_id=' + documentId, {\n        method: 'DELETE',\n      })\n      .then(response => response.json())\n      .then(data => {\n        console.log('Got this back', data);\n        this.onFetch();\n      });\n  }\n\n  // Api call grab data from mongodb\n\n  // this.setState({data}, () => console.log('data fetched...', data)\n  //       dataOne.push(data);\n  onFetch() {\n    console.log('runing')\n    let dataOne = []\n    fetch('/api/mongodb/markers/')\n        .then(res => res.json())\n        .then(data => {\n          console.log('receiving data', data);\n          dataOne.push(data);\n        //   this.setState({data});\n          console.log(dataOne)\n\n          this.setUserLocation();\n          \n                 \n        });\n      }\n\n  onChangeContent = (ev) => {\n    this.setState({\n      name : ev.target.value,\n    });\n  }\n\n  //Post function// create new markers, store data into database\n  submit = () => {\n      var date = new Date();\n    \n      const formData = {\n\n        animal : this.state.name,\n        latitude: this.state.userLocation.lat,\n        longitude: this.state.userLocation.long, \n        date : date,\n        comment :this.state.comment,\n        submitter : this.state.submitter,\n\n      };\n      console.log(this.state.name)\n  \n      fetch('/api/mongodb/markers/', {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(formData),\n        })\n        .then(response => response.json())\n        .then(data => {\n          console.log('Got this back', data);\n  \n        });\n  }\n  componentDidMount(){\n    \n    this.onFetch();  \n\n  }\n\n\n  render () {\n    \n    \n    return (\n      <div className=\"App\">\n        {/* Links go here */}\n        <div className=\"NavBarContainer\">\n          <NavBar \n            homeLink='/'\n            contributeLink='/contribute'\n          />\n        </div>\n        {/* switch/routes go here */}\n        <div className=\"SideBarContainer\">\n\n          {/* {\n            this.state.animal_details.map( animal => (\n              <SmallCard \n              emoji={'🐇'}\n              name={animal.name}\n              timestamp={animal.time}\n              submitted_by={animal.spotter}\n              />\n            )\n          )} */}\n          <SmallCard \n            emoji={'🐇'}\n            name={'name'}\n            timestamp={'timestamp'}\n            submitted_by={'submitted by'}\n          />\n          \n        </div>\n\n        <div className=\"MapContainer\">\n\n            <ReactMapGl\n                {...this.state.viewport}\n                mapboxApiAccessToken = {process.env.REACT_APP_TOKEN}\n                mapStyle ='mapbox://styles/marby87/ck6j39qkz0i7k1inu9gqqc4o1'\n                onViewportChange={(viewport) => this.onViewportChange(viewport)}> \n                \n                {Object.keys(this.state.userLocation).length !== 0 ? (\n                <Marker\n                    className=\"user\"\n                    keys =\"1\"\n                    latitude={this.state.userLocation.lat}\n                    longitude={this.state.userLocation.long}\n                >\n            \n                    <img className = \"location-icon\" alt=\"location-icon\" src={User}/>\n                </Marker>\n                ) : ( \n                <div>Empty</div>\n                )}\n\n                {Object.values(this.state.data).length !==0 ?(\n                this.state.data.map((data,index) => (\n                <Marker\n                    className = \"markers\"\n                    keys={data._id}\n                    id={data._id}\n                    latitude={data.latitude}\n                    longitude={data.longitude}\n                    \n                    >\n                    <img className = \"location-icon\" alt=\"location-icon\" src={Red} \n                    />\n                    {this.state.distance[data._id]} <br/> {data.animal}  </Marker>\n        \n                ))\n                ) : (\n                <div>Empty</div>\n                )}\n            \n\n            </ReactMapGl>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}