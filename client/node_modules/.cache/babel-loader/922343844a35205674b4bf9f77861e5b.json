{"ast":null,"code":"var _jsxFileName = \"/Users/marbypangilinan/Desktop/Spotzoo/spotzoo/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport mapboxgl, { Map } from 'mapbox-gl';\nimport NavBar from './components/NavBar/NavBar.js';\nimport SmallCard from './components/SmallCard/SmallCard.js';\nimport ReactMapGl, { Marker } from \"react-map-gl\";\nimport Red from \"./red_marker.png\";\nimport User from \"./user.png\"; // Component - Pages\n// import Welcome from './components/pages/Welcome/Welcome.js';\n// animal_data = [\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         spot_time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     }\n// ]\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      animal_details: null,\n      filter: \"\",\n      highlighted_animal: null,\n      animal_name: \"\",\n      animal_latitude: null,\n      animal_longitude: null,\n      animal_spot_time: null,\n      animal_animalType: null,\n      \"viewport\": {\n        width: '100vw',\n        height: '100vh',\n        latitude: 37.6162,\n        longitude: -122.0884,\n        zoom: 10\n      },\n      userLocation: {},\n      data: [],\n      distance: [],\n      animals: []\n    };\n\n    this.onViewportChange = viewport => {\n      this.setState({\n        viewport\n      });\n    };\n\n    this.setUserLocation = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        let setUserLocation = {\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        }; // distance to markers\n\n        let distanceOne = {};\n\n        for (let i of this.state.data) {\n          let k = new mapboxgl.LngLat(i.longitude, i.latitude);\n          let s = new mapboxgl.LngLat(setUserLocation.long, setUserLocation.lat);\n          let dist = k.distanceTo(s) * 0.000621;\n          let miles = Math.max(Math.ceil(dist * 10) / 10, 2.8);\n          let id = i[\"_id\"];\n          distanceOne[id] = miles;\n        }\n\n        this.setState({\n          distance: distanceOne\n        });\n        console.log(this.state.distance);\n        this.setState({\n          userLocation: setUserLocation\n        });\n        this.state.viewport.latitude = position.coords.latitude;\n        this.state.viewport.longitude = position.coords.longitude;\n      });\n    };\n\n    this.onChangeContent = ev => {\n      this.setState({\n        name: ev.target.value\n      });\n    };\n\n    this.submit = () => {\n      var date = new Date();\n      const formData = {\n        animal: this.state.name,\n        latitude: this.state.userLocation.lat,\n        longitude: this.state.userLocation.long,\n        date: date,\n        comment: this.state.comment,\n        submitter: this.state.submitter\n      };\n      console.log(this.state.name);\n      fetch('/api/mongodb/markers/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      }).then(response => response.json()).then(data => {\n        console.log('Got this back', data);\n      });\n    };\n  }\n\n  // DELETE function,\n  deleteMarker(documentId) {\n    fetch('/api/mongodb/markers/?_id=' + documentId, {\n      method: 'DELETE'\n    }).then(response => response.json()).then(data => {\n      console.log('Got this back', data);\n      this.onFetch();\n    });\n  } // Api call grab data from mongodb\n  // this.setState({data}, () => console.log('data fetched...', data)\n  //       dataOne.push(data);\n\n\n  onFetch() {\n    console.log('runing');\n    let dataOne = [];\n    fetch('/api/mongodb/markers/').then(res => res.json()).then(data => {\n      console.log('receiving data', data);\n      dataOne.push(data);\n      this.setState({\n        data\n      });\n      console.log(dataOne);\n      this.setUserLocation();\n    });\n    fetch('/api/mongodb/animals/').then(res => res.json()).then(animals => {\n      console.log('receiving data', animals);\n      this.setState({\n        animals\n      });\n      console.log(animals);\n    });\n  }\n\n  componentDidMount() {\n    this.onFetch();\n  }\n\n  render() {\n    const One = Object.keys(this.state.userLocation).length;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"NavBarContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      homeLink: \"/\",\n      contributeLink: \"/contribute\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"SideBarContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(SmallCard, {\n      emoji: '🐇',\n      name: 'name',\n      timestamp: 'timestamp',\n      submitted_by: 'submitted by',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(SmallCard, {\n      emoji: '🐇',\n      name: 'name',\n      timestamp: 'timestamp',\n      submitted_by: 'submitted by',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(SmallCard, {\n      emoji: '🐇',\n      name: 'name',\n      timestamp: 'timestamp',\n      submitted_by: 'submitted by',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(SmallCard, {\n      emoji: '🐇',\n      name: 'name',\n      timestamp: 'timestamp',\n      submitted_by: 'submitted by',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(SmallCard, {\n      emoji: '🐇',\n      name: 'name',\n      timestamp: 'timestamp',\n      submitted_by: 'submitted by',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"MapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(ReactMapGl, Object.assign({}, this.state.viewport, {\n      mapboxApiAccessToken: process.env.REACT_APP_TOKEN,\n      mapStyle: \"mapbox://styles/marby87/ck6j39qkz0i7k1inu9gqqc4o1\",\n      onViewportChange: viewport => this.onViewportChange(viewport),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), Object.keys(this.state.userLocation).length !== 0 ? React.createElement(Marker, {\n      className: \"user\",\n      keys: \"1\",\n      latitude: this.state.userLocation.lat,\n      longitude: this.state.userLocation.long,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"location-icon\",\n      src: User,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Empty\"), Object.values(this.state.data).length !== 0 ? this.state.data.map((data, index) => React.createElement(Marker, {\n      className: \"markers\",\n      keys: data._id,\n      id: data._id,\n      latitude: data.latitude,\n      longitude: data.longitude,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"location-icon\",\n      src: Red,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), this.state.distance[data._id], \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), \" \", data.animal, \"  \")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Empty\"))));\n  }\n\n}\n\nexport default App; // {this.state.data.map((data,index) =>(\n//     <Map\n//     {...this.state.viewport}\n//     onViewport ={(viewport) => this.onViewportChange(viewport)}\n//     {One !== 0 ?(\n//       userLat = this.state.userLocation.lat\n//       userLong = this.state.userLocation.long\n//       User = User\n//     ): ( \n//         <div>Empty</div>\n//     )} \n//     />\n// ))}","map":{"version":3,"sources":["/Users/marbypangilinan/Desktop/Spotzoo/spotzoo/client/src/App.js"],"names":["React","Component","mapboxgl","Map","NavBar","SmallCard","ReactMapGl","Marker","Red","User","App","state","animal_details","filter","highlighted_animal","animal_name","animal_latitude","animal_longitude","animal_spot_time","animal_animalType","width","height","latitude","longitude","zoom","userLocation","data","distance","animals","onViewportChange","viewport","setState","setUserLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","long","distanceOne","i","k","LngLat","s","dist","distanceTo","miles","Math","max","ceil","id","console","log","onChangeContent","ev","name","target","value","submit","date","Date","formData","animal","comment","submitter","fetch","method","headers","body","JSON","stringify","then","response","json","deleteMarker","documentId","onFetch","dataOne","res","push","componentDidMount","render","One","Object","keys","length","process","env","REACT_APP_TOKEN","values","map","index","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,IAAmBC,GAAnB,QAA8B,WAA9B;AAEA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,UAAP,IAAmBC,MAAnB,QAAgC,cAAhC;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,IAAP,MAAiB,YAAjB,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAGA,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BU,KAF0B,GAElB;AACJC,MAAAA,cAAc,EAAE,IADZ;AAEJC,MAAAA,MAAM,EAAE,EAFJ;AAGJC,MAAAA,kBAAkB,EAAE,IAHhB;AAIJC,MAAAA,WAAW,EAAE,EAJT;AAKJC,MAAAA,eAAe,EAAE,IALb;AAMJC,MAAAA,gBAAgB,EAAE,IANd;AAOJC,MAAAA,gBAAgB,EAAE,IAPd;AAQJC,MAAAA,iBAAiB,EAAE,IARf;AASJ,kBAAY;AACVC,QAAAA,KAAK,EAAE,OADG;AAEVC,QAAAA,MAAM,EAAE,OAFE;AAGVC,QAAAA,QAAQ,EAAE,OAHA;AAIVC,QAAAA,SAAS,EAAE,CAAC,QAJF;AAKVC,QAAAA,IAAI,EAAE;AALI,OATR;AAgBJC,MAAAA,YAAY,EAAG,EAhBX;AAiBJC,MAAAA,IAAI,EAAC,EAjBD;AAkBJC,MAAAA,QAAQ,EAAG,EAlBP;AAmBJC,MAAAA,OAAO,EAAC;AAnBJ,KAFkB;;AAAA,SAyB1BC,gBAzB0B,GAyBPC,QAAQ,IAAI;AAC7B,WAAKC,QAAL,CAAc;AAACD,QAAAA;AAAD,OAAd;AACD,KA3ByB;;AAAA,SA6B1BE,eA7B0B,GA6BR,MAAM;AACtBC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAI;AAClD,YAAIJ,eAAe,GAAG;AAClBK,UAAAA,GAAG,EAAED,QAAQ,CAACE,MAAT,CAAgBhB,QADH;AAElBiB,UAAAA,IAAI,EAAEH,QAAQ,CAACE,MAAT,CAAgBf;AAFJ,SAAtB,CADkD,CAKjD;;AACA,YAAIiB,WAAW,GAAG,EAAlB;;AACA,aAAK,IAAIC,CAAT,IAAc,KAAK9B,KAAL,CAAWe,IAAzB,EAA+B;AAC3B,cAAIgB,CAAC,GAAG,IAAIxC,QAAQ,CAACyC,MAAb,CAAoBF,CAAC,CAAClB,SAAtB,EAAiCkB,CAAC,CAACnB,QAAnC,CAAR;AACA,cAAIsB,CAAC,GAAG,IAAI1C,QAAQ,CAACyC,MAAb,CAAoBX,eAAe,CAACO,IAApC,EAA0CP,eAAe,CAACK,GAA1D,CAAR;AACA,cAAIQ,IAAI,GAAGH,CAAC,CAACI,UAAF,CAAaF,CAAb,IAAiB,QAA5B;AACA,cAAIG,KAAK,GAAIC,IAAI,CAACC,GAAL,CAAUD,IAAI,CAACE,IAAL,CAAUL,IAAI,GAAG,EAAjB,IAAuB,EAAjC,EAAqC,GAArC,CAAb;AACA,cAAIM,EAAE,GAAGV,CAAC,CAAC,KAAD,CAAV;AACAD,UAAAA,WAAW,CAACW,EAAD,CAAX,GAAkBJ,KAAlB;AACD;;AACH,aAAKhB,QAAL,CAAc;AACZJ,UAAAA,QAAQ,EAAGa;AADC,SAAd;AAGAY,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAK1C,KAAL,CAAWgB,QAAvB;AACA,aAAKI,QAAL,CAAc;AACZN,UAAAA,YAAY,EAAEO;AADF,SAAd;AAGD,aAAKrB,KAAL,CAAWmB,QAAX,CAAoBR,QAApB,GAA+Bc,QAAQ,CAACE,MAAT,CAAgBhB,QAA/C;AACA,aAAKX,KAAL,CAAWmB,QAAX,CAAoBP,SAApB,GAAgCa,QAAQ,CAACE,MAAT,CAAgBf,SAAhD;AACF,OAxBD;AAyBD,KAvDyB;;AAAA,SAiG1B+B,eAjG0B,GAiGPC,EAAD,IAAQ;AACxB,WAAKxB,QAAL,CAAc;AACZyB,QAAAA,IAAI,EAAGD,EAAE,CAACE,MAAH,CAAUC;AADL,OAAd;AAGD,KArGyB;;AAAA,SAwG1BC,MAxG0B,GAwGjB,MAAM;AACX,UAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AAEA,YAAMC,QAAQ,GAAG;AAEfC,QAAAA,MAAM,EAAG,KAAKpD,KAAL,CAAW6C,IAFL;AAGflC,QAAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWc,YAAX,CAAwBY,GAHnB;AAIfd,QAAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWc,YAAX,CAAwBc,IAJpB;AAKfqB,QAAAA,IAAI,EAAGA,IALQ;AAMfI,QAAAA,OAAO,EAAE,KAAKrD,KAAL,CAAWqD,OANL;AAOfC,QAAAA,SAAS,EAAG,KAAKtD,KAAL,CAAWsD;AAPR,OAAjB;AAUAb,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK1C,KAAL,CAAW6C,IAAvB;AAEAU,MAAAA,KAAK,CAAC,uBAAD,EAA0B;AAC3BC,QAAAA,MAAM,EAAE,MADmB;AAE3BC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB,SAFkB;AAG3BC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,QAAf;AAHqB,OAA1B,CAAL,CAKGU,IALH,CAKQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALpB,EAMGF,IANH,CAMQ9C,IAAI,IAAI;AACZ0B,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B3B,IAA7B;AAED,OATH;AAUH,KAjIyB;AAAA;;AAyD1B;AACAiD,EAAAA,YAAY,CAACC,UAAD,EAAa;AACvBV,IAAAA,KAAK,CAAC,+BAA+BU,UAAhC,EAA4C;AAC7CT,MAAAA,MAAM,EAAE;AADqC,KAA5C,CAAL,CAGGK,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAIGF,IAJH,CAIQ9C,IAAI,IAAI;AACZ0B,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B3B,IAA7B;AACA,WAAKmD,OAAL;AACD,KAPH;AAQD,GAnEyB,CAqE1B;AAEA;AACA;;;AACAA,EAAAA,OAAO,GAAG;AACRzB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAIyB,OAAO,GAAG,EAAd;AACAZ,IAAAA,KAAK,CAAC,uBAAD,CAAL,CACKM,IADL,CACUO,GAAG,IAAIA,GAAG,CAACL,IAAJ,EADjB,EAEKF,IAFL,CAEU9C,IAAI,IAAI;AACZ0B,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B3B,IAA9B;AACAoD,MAAAA,OAAO,CAACE,IAAR,CAAatD,IAAb;AACA,WAAKK,QAAL,CAAc;AAACL,QAAAA;AAAD,OAAd;AACA0B,MAAAA,OAAO,CAACC,GAAR,CAAYyB,OAAZ;AAEA,WAAK9C,eAAL;AAGD,KAXL;AAYAkC,IAAAA,KAAK,CAAC,uBAAD,CAAL,CACKM,IADL,CACUO,GAAG,IAAIA,GAAG,CAACL,IAAJ,EADjB,EAEKF,IAFL,CAEU5C,OAAO,IAAI;AACfwB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BzB,OAA9B;AACA,WAAKG,QAAL,CAAc;AAACH,QAAAA;AAAD,OAAd;AACAwB,MAAAA,OAAO,CAACC,GAAR,CAAYzB,OAAZ;AACC,KANP;AAOD;;AAmCDqD,EAAAA,iBAAiB,GAAE;AAEjB,SAAKJ,OAAL;AAED;;AAGDK,EAAAA,MAAM,GAAI;AACR,UAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAK1E,KAAL,CAAWc,YAAvB,EAAqC6D,MAAjD;AAGA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAC,GADX;AAEE,MAAA,cAAc,EAAC,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,EASE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,IADT;AAEE,MAAA,IAAI,EAAE,MAFR;AAGE,MAAA,SAAS,EAAE,WAHb;AAIE,MAAA,YAAY,EAAE,cAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,IADT;AAEE,MAAA,IAAI,EAAE,MAFR;AAGE,MAAA,SAAS,EAAE,WAHb;AAIE,MAAA,YAAY,EAAE,cAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAaE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,IADT;AAEE,MAAA,IAAI,EAAE,MAFR;AAGE,MAAA,SAAS,EAAE,WAHb;AAIE,MAAA,YAAY,EAAE,cAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAmBE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,IADT;AAEE,MAAA,IAAI,EAAE,MAFR;AAGE,MAAA,SAAS,EAAE,WAHb;AAIE,MAAA,YAAY,EAAE,cAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EAyBE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,IADT;AAEE,MAAA,IAAI,EAAE,MAFR;AAGE,MAAA,SAAS,EAAE,WAHb;AAIE,MAAA,YAAY,EAAE,cAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBF,CATF,EAyCE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,UAAD,oBACU,KAAK3E,KAAL,CAAWmB,QADrB;AAEM,MAAA,oBAAoB,EAAIyD,OAAO,CAACC,GAAR,CAAYC,eAF1C;AAGM,MAAA,QAAQ,EAAE,mDAHhB;AAIM,MAAA,gBAAgB,EAAG3D,QAAD,IAAc,KAAKD,gBAAL,CAAsBC,QAAtB,CAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMOsD,MAAM,CAACC,IAAP,CAAY,KAAK1E,KAAL,CAAWc,YAAvB,EAAqC6D,MAArC,KAAgD,CAAhD,GACC,oBAAC,MAAD;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,IAAI,EAAE,GAFR;AAGE,MAAA,QAAQ,EAAE,KAAK3E,KAAL,CAAWc,YAAX,CAAwBY,GAHpC;AAIE,MAAA,SAAS,EAAE,KAAK1B,KAAL,CAAWc,YAAX,CAAwBc,IAJrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AAAK,MAAA,SAAS,EAAG,eAAjB;AAAiC,MAAA,GAAG,EAAE9B,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADD,GAWC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjBR,EAoBO2E,MAAM,CAACM,MAAP,CAAc,KAAK/E,KAAL,CAAWe,IAAzB,EAA+B4D,MAA/B,KAAyC,CAAzC,GACC,KAAK3E,KAAL,CAAWe,IAAX,CAAgBiE,GAAhB,CAAoB,CAACjE,IAAD,EAAMkE,KAAN,KACpB,oBAAC,MAAD;AACE,MAAA,SAAS,EAAG,SADd;AAEE,MAAA,IAAI,EAAElE,IAAI,CAACmE,GAFb;AAGE,MAAA,EAAE,EAAEnE,IAAI,CAACmE,GAHX;AAIE,MAAA,QAAQ,EAAEnE,IAAI,CAACJ,QAJjB;AAKE,MAAA,SAAS,EAAEI,IAAI,CAACH,SALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE;AAAK,MAAA,SAAS,EAAG,eAAjB;AAAiC,MAAA,GAAG,EAAEf,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EAUG,KAAKG,KAAL,CAAWgB,QAAX,CAAoBD,IAAI,CAACmE,GAAzB,CAVH,OAUkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVlC,OAUyCnE,IAAI,CAACqC,MAV9C,OADA,CADD,GAgBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eApCR,CADA,CAzCF,CADF;AAsFH;;AAnO2B;;AAsO5B,eAAerD,GAAf,C,CACE;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport mapboxgl, { Map } from 'mapbox-gl'\n\nimport NavBar from './components/NavBar/NavBar.js';\nimport SmallCard from './components/SmallCard/SmallCard.js';\nimport ReactMapGl,{Marker} from \"react-map-gl\"\nimport Red from \"./red_marker.png\"\nimport User from \"./user.png\"\n\n// Component - Pages\n// import Welcome from './components/pages/Welcome/Welcome.js';\n\n// animal_data = [\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     },\n//     { \n//         name: \"Lake Goose\",\n//         latitude: 1.22,\n//         longitude: 3.22,\n//         spot_time:\"7:22 AM\",\n//         animalType: \"Goose\"\n//     }\n\n\n// ]\n\n\nclass App extends Component {\n\n  state = {\n      animal_details: null,\n      filter: \"\",\n      highlighted_animal: null,\n      animal_name: \"\",\n      animal_latitude: null,\n      animal_longitude: null,\n      animal_spot_time: null,\n      animal_animalType: null,\n      \"viewport\": {\n        width: '100vw',\n        height: '100vh',\n        latitude: 37.6162,\n        longitude: -122.0884,\n        zoom: 10\n      },\n      userLocation : {},\n      data:[],\n      distance : [],\n      animals:[]\n      \n    };\n  \n  onViewportChange = viewport => {\n    this.setState({viewport});\n  }\n  // User location function\n  setUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n       let setUserLocation = {\n           lat: position.coords.latitude,\n           long: position.coords.longitude\n        }; \n        // distance to markers\n        let distanceOne = {}\n        for (let i of this.state.data ){\n            let k = new mapboxgl.LngLat(i.longitude, i.latitude);\n            let s = new mapboxgl.LngLat(setUserLocation.long, setUserLocation.lat)\n            let dist = k.distanceTo(s)* 0.000621\n            let miles = (Math.max( Math.ceil(dist * 10) / 10, 2.8 ))\n            let id = i[\"_id\"];\n            distanceOne[id] = miles;     \n          } \n        this.setState({\n          distance : distanceOne\n        })\n        console.log(this.state.distance)\n        this.setState({\n          userLocation: setUserLocation,\n       });\n       this.state.viewport.latitude = position.coords.latitude;\n       this.state.viewport.longitude = position.coords.longitude;\n    });\n  };    \n    \n  // DELETE function,\n  deleteMarker(documentId) {\n    fetch('/api/mongodb/markers/?_id=' + documentId, {\n        method: 'DELETE',\n      })\n      .then(response => response.json())\n      .then(data => {\n        console.log('Got this back', data);\n        this.onFetch();\n      });\n  }\n\n  // Api call grab data from mongodb\n\n  // this.setState({data}, () => console.log('data fetched...', data)\n  //       dataOne.push(data);\n  onFetch() {\n    console.log('runing')\n    let dataOne = []\n    fetch('/api/mongodb/markers/')\n        .then(res => res.json())\n        .then(data => {\n          console.log('receiving data', data);\n          dataOne.push(data);\n          this.setState({data});\n          console.log(dataOne)\n\n          this.setUserLocation();\n          \n                 \n        });\n    fetch('/api/mongodb/animals/')\n        .then(res => res.json())\n        .then(animals => {\n          console.log('receiving data', animals);\n          this.setState({animals});\n          console.log(animals)\n          })\n  }\n\n  onChangeContent = (ev) => {\n    this.setState({\n      name : ev.target.value,\n    });\n  }\n\n  //Post function// create new markers, store data into database\n  submit = () => {\n      var date = new Date();\n    \n      const formData = {\n\n        animal : this.state.name,\n        latitude: this.state.userLocation.lat,\n        longitude: this.state.userLocation.long, \n        date : date,\n        comment :this.state.comment,\n        submitter : this.state.submitter,\n\n      };\n      console.log(this.state.name)\n  \n      fetch('/api/mongodb/markers/', {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(formData),\n        })\n        .then(response => response.json())\n        .then(data => {\n          console.log('Got this back', data);\n  \n        });\n  }\n  componentDidMount(){\n    \n    this.onFetch();  \n\n  }\n\n\n  render () {\n    const One = Object.keys(this.state.userLocation).length\n    \n    \n    return (\n      <div className=\"App\">\n        {/* Links go here */}\n        <div className=\"NavBarContainer\">\n          <NavBar \n            homeLink='/'\n            contributeLink='/contribute'\n          />\n        </div>\n        {/* switch/routes go here */}\n        <div className=\"SideBarContainer\">\n          <SmallCard \n            emoji={'🐇'}\n            name={'name'}\n            timestamp={'timestamp'}\n            submitted_by={'submitted by'}\n          />\n          <SmallCard \n            emoji={'🐇'}\n            name={'name'}\n            timestamp={'timestamp'}\n            submitted_by={'submitted by'}\n          />\n          <SmallCard \n            emoji={'🐇'}\n            name={'name'}\n            timestamp={'timestamp'}\n            submitted_by={'submitted by'}\n          />\n          <SmallCard \n            emoji={'🐇'}\n            name={'name'}\n            timestamp={'timestamp'}\n            submitted_by={'submitted by'}\n          />\n          <SmallCard \n            emoji={'🐇'}\n            name={'name'}\n            timestamp={'timestamp'}\n            submitted_by={'submitted by'}\n          />\n        </div>\n        <div className=\"MapContainer\">\n        <ReactMapGl\n              {...this.state.viewport}\n              mapboxApiAccessToken = {process.env.REACT_APP_TOKEN}\n              mapStyle ='mapbox://styles/marby87/ck6j39qkz0i7k1inu9gqqc4o1'\n              onViewportChange={(viewport) => this.onViewportChange(viewport)}> \n\n              {Object.keys(this.state.userLocation).length !== 0 ? (\n                <Marker\n                  className=\"user\"\n                  keys =\"1\"\n                  latitude={this.state.userLocation.lat}\n                  longitude={this.state.userLocation.long}\n                >\n                \n                  <img className = \"location-icon\" src={User}/>\n                </Marker>\n              ) : ( \n                <div>Empty</div>\n              )}\n\n              {Object.values(this.state.data).length !==0 ?(\n                this.state.data.map((data,index) => (\n                <Marker\n                  className = \"markers\"\n                  keys={data._id}\n                  id={data._id}\n                  latitude={data.latitude}\n                  longitude={data.longitude}\n                  \n                  >\n                  <img className = \"location-icon\" src={Red} \n                  />\n                  {this.state.distance[data._id]} <br/> {data.animal}  </Marker>\n\n                ))\n              ) : (\n                <div>Empty</div>\n              )}\n  \n              </ReactMapGl>\n  </div>\n</div>\n);\n}\n}\n\nexport default App;\n  // {this.state.data.map((data,index) =>(\n  //     <Map\n  //     {...this.state.viewport}\n  //     onViewport ={(viewport) => this.onViewportChange(viewport)}\n      \n  //     {One !== 0 ?(\n  //       userLat = this.state.userLocation.lat\n  //       userLong = this.state.userLocation.long\n  //       User = User\n  \n  //     ): ( \n  //         <div>Empty</div>\n  //     )} \n  //     />\n  // ))}"]},"metadata":{},"sourceType":"module"}